name: Build wheels

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
    tags:
      - v*
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.9.0

      - name: Build wheels
        run: |
             if [ "$RUNNER_OS" == "Linux" ]; then
                ARCHS=auto64
             elif [ "$RUNNER_OS" == "macOS" ]; then
                ARCHS="x86_64 arm64"
             else
               echo "RUNNER_OS=$RUNNER_OS not supported!"
               exit 1
             fi
             echo "RUNNER_OS=$RUNNER_OS"
             echo "ARCHS=${ARCHS}"

             for ARCH in $ARCHS; do
                echo "ARCH=${ARCH}"

                if [[ $ARCH == "arm64" ]]; then
                  # taken from https://github.com/MacPython/gfortran-install/blob/master/gfortran_utils.sh#L97
                  curl -L -O https://github.com/isuruf/gcc/releases/download/gcc-10-arm-20210228/gfortran-darwin-arm64.tar.gz
                  export GFORTRAN_SHA=f26990f6f08e19b2ec150b9da9d59bd0558261dd
                  if [[ "$(shasum gfortran-darwin-arm64.tar.gz)" != "${GFORTRAN_SHA}  gfortran-darwin-arm64.tar.gz" ]]; then
                            echo "shasum mismatch for gfortran-darwin-arm64"
                            exit 1
                  fi
                  sudo mkdir -p /opt/
                  sudo cp "gfortran-darwin-arm64.tar.gz" /opt/gfortran-darwin-arm64.tar.gz
                  pushd /opt
                        sudo tar -xvf gfortran-darwin-arm64.tar.gz
                        sudo rm gfortran-darwin-arm64.tar.gz
                  popd
                  export FC_ARM64="$(find /opt/gfortran-darwin-arm64/bin -name "*-gfortran")"
                  libgfortran="$(find /opt/gfortran-darwin-arm64/lib -name libgfortran.dylib)"
                  libdir=$(dirname $libgfortran)
                  export FC_ARM64_LDFLAGS="-L$libdir -Wl,-rpath,$libdir"
                  export CIBW_ENVIRONMENT="$ARCH=${ARCH} RUNNER_OS=${RUNNER_OS} FC=$FC_ARM64 F90=$FC_ARM64 F95=$FC_ARM64 F77=$FC_ARM64 LDFLAGS=\"$FC_ARM64_LDFLAGS\" NPY_DISTUTILS_APPEND_FLAGS=1 MACOSX_DEPLOYMENT_TARGET=11.0 SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX11.3.sdk"
                else
                  export CIBW_ENVIRONMENT="$ARCH=${ARCH} RUNNER_OS=${RUNNER_OS}"
                fi

                echo "CIBW_ENVIRONMENT=$CIBW_ENVIRONMENT"
                python -m cibuildwheel --output-dir wheelhouse --archs $ARCH
             done
        env:
           CIBW_SKIP: cp27-* cp35-* cp36-* cp311-* pp* *musllinux*
           CIBW_BEFORE_ALL_MACOS: "brew install gfortran && brew unlink gfortran && brew link gfortran"
           CIBW_BEFORE_ALL_LINUX: "which yum && yum install -y gcc-gfortran || apk add gfortran"
           CIBW_BEFORE_BUILD: "pip install oldest-supported-numpy"
           CIBW_TEST_COMMAND: "cd {project}/examples; make clean; make test"
           CIBW_TEST_SKIP: "*-macosx_arm64"
           
      # Uncomment to get SSH access for testing
      - name: Setup tmate session
        if: failure()
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 15

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

      - name: Release wheels
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: wheelhouse/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check tag
        id: check-tag
        run: |
          if [[ ${{ github.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo ::set-output name=match::true
          fi

      - name: Deploy to PyPI
        if: steps.check-tag.outputs.match == 'true'
        run: |
          pip install twine build
          python -m build
          twine upload wheelhouse/*.whl
          twine upload dist/f90wrap-*.tar.gz # sdist only
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}